class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null; // Initially, the previous node is null
        ListNode curr = head; // Start with the head node

        while (curr != null) {
            ListNode next = curr.next; // Store the next node
            curr.next = prev;         // Reverse the current node's pointer
            prev = curr;              // Move the previous pointer forward
            curr = next;              // Move the current pointer forward
        }

        return prev; // 'prev' is the new head of the reversed list
    }
}
