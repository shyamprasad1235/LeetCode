import java.util.LinkedList;
import java.util.Queue;

class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) return 0; // Base case: Empty tree
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int depth = 1; // Root is at depth 1

        while (!queue.isEmpty()) {
            int size = queue.size(); // Number of nodes at current level
            
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();

                // If we find a leaf node, return the current depth
                if (node.left == null && node.right == null) return depth;

                // Enqueue left and right children if they exist
                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
            }

            depth++; // Move to the next level
        }

        return depth; // This line should never be reached
    }
}
