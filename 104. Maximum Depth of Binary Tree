#Depth First Search (Recursion Method)

int maxDepthDFS(struct TreeNode* root) {
    if (root == NULL) return 0;
    int leftDepth = maxDepthDFS(root->left);
    int rightDepth = maxDepthDFS(root->right);
    return (leftDepth > rightDepth ? leftDepth : rightDepth) + 1;
}

#Breadth First Search (Iterative Method)

int maxDepth(struct TreeNode* root) {
    if (root == NULL) return 0;
    
    // Stack to store (node, depth) pairs
    struct StackNode {
        struct TreeNode* node;
        int depth;
    };
    
    struct StackNode stack[10000];
    int top = 0;
    int maxDepth = 0;
    
    stack[top++] = (struct StackNode){root, 1};
    
    while (top > 0) {
        struct StackNode current = stack[--top];
        
        if (current.depth > maxDepth) {
            maxDepth = current.depth;
        }
        
        if (current.node->right) {
            stack[top++] = (struct StackNode){current.node->right, current.depth + 1};
        }
        
        if (current.node->left) {
            stack[top++] = (struct StackNode){current.node->left, current.depth + 1};
        }
    }
    
    return maxDepth;
}
