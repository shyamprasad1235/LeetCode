import java.util.*;

class Solution {
    public int shortestSubarray(int[] nums, int k) {
        int n = nums.length;
        long[] prefixSum = new long[n + 1];

        // Build prefix sum array
        for (int i = 0; i < n; i++) {
            prefixSum[i + 1] = prefixSum[i] + nums[i];
        }

        int res = n + 1;
        Deque<Integer> deque = new LinkedList<>();

        for (int i = 0; i < prefixSum.length; i++) {
            // Condition 1: Found valid subarray
            while (!deque.isEmpty() && prefixSum[i] - prefixSum[deque.peekFirst()] >= k) {
                res = Math.min(res, i - deque.pollFirst());
            }

            // Condition 2: Maintain monotonicity
            while (!deque.isEmpty() && prefixSum[i] <= prefixSum[deque.peekLast()]) {
                deque.pollLast();
            }

            deque.offerLast(i);
        }

        return res <= n ? res : -1;
    }
}
